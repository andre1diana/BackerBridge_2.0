#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackerBridge_2._0
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BackerBridge")]
	public partial class BackerBridgeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCampaign(Campaign instance);
    partial void UpdateCampaign(Campaign instance);
    partial void DeleteCampaign(Campaign instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertDonation(Donation instance);
    partial void UpdateDonation(Donation instance);
    partial void DeleteDonation(Donation instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public BackerBridgeDataContext() : 
				base(global::BackerBridge_2._0.Properties.Settings.Default.BackerBridgeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BackerBridgeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackerBridgeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackerBridgeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackerBridgeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Campaign> Campaigns
		{
			get
			{
				return this.GetTable<Campaign>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Donation> Donations
		{
			get
			{
				return this.GetTable<Donation>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Campaign")]
	public partial class Campaign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CampaignID;
		
		private string _CampaignName;
		
		private System.Nullable<int> _CompanyID;
		
		private System.Nullable<int> _UserID;
		
		private string _ProjectDescription;
		
		private System.Nullable<double> _GoalAmount;
		
		private System.Nullable<double> _CurrentAmount;
		
		private string _CampaignStatus;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampaignIDChanging(int value);
    partial void OnCampaignIDChanged();
    partial void OnCampaignNameChanging(string value);
    partial void OnCampaignNameChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnProjectDescriptionChanging(string value);
    partial void OnProjectDescriptionChanged();
    partial void OnGoalAmountChanging(System.Nullable<double> value);
    partial void OnGoalAmountChanged();
    partial void OnCurrentAmountChanging(System.Nullable<double> value);
    partial void OnCurrentAmountChanged();
    partial void OnCampaignStatusChanging(string value);
    partial void OnCampaignStatusChanged();
    #endregion
		
		public Campaign()
		{
			this._Company = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampaignID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					this.OnCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._CampaignID = value;
					this.SendPropertyChanged("CampaignID");
					this.OnCampaignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampaignName", DbType="VarChar(50)")]
		public string CampaignName
		{
			get
			{
				return this._CampaignName;
			}
			set
			{
				if ((this._CampaignName != value))
				{
					this.OnCampaignNameChanging(value);
					this.SendPropertyChanging();
					this._CampaignName = value;
					this.SendPropertyChanged("CampaignName");
					this.OnCampaignNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDescription", DbType="VarChar(500)")]
		public string ProjectDescription
		{
			get
			{
				return this._ProjectDescription;
			}
			set
			{
				if ((this._ProjectDescription != value))
				{
					this.OnProjectDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProjectDescription = value;
					this.SendPropertyChanged("ProjectDescription");
					this.OnProjectDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoalAmount", DbType="Float")]
		public System.Nullable<double> GoalAmount
		{
			get
			{
				return this._GoalAmount;
			}
			set
			{
				if ((this._GoalAmount != value))
				{
					this.OnGoalAmountChanging(value);
					this.SendPropertyChanging();
					this._GoalAmount = value;
					this.SendPropertyChanged("GoalAmount");
					this.OnGoalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentAmount", DbType="Float")]
		public System.Nullable<double> CurrentAmount
		{
			get
			{
				return this._CurrentAmount;
			}
			set
			{
				if ((this._CurrentAmount != value))
				{
					this.OnCurrentAmountChanging(value);
					this.SendPropertyChanging();
					this._CurrentAmount = value;
					this.SendPropertyChanged("CurrentAmount");
					this.OnCurrentAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampaignStatus", DbType="VarChar(20)")]
		public string CampaignStatus
		{
			get
			{
				return this._CampaignStatus;
			}
			set
			{
				if ((this._CampaignStatus != value))
				{
					this.OnCampaignStatusChanging(value);
					this.SendPropertyChanging();
					this._CampaignStatus = value;
					this.SendPropertyChanged("CampaignStatus");
					this.OnCampaignStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Campaign", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Campaigns.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Campaigns.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Campaign", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Campaigns.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Campaigns.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _CompanyName;
		
		private string _CompanyEmail;
		
		private string _CompanyAddress;
		
		private System.Nullable<int> _UserID;
		
		private EntitySet<Campaign> _Campaigns;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCompanyEmailChanging(string value);
    partial void OnCompanyEmailChanged();
    partial void OnCompanyAddressChanging(string value);
    partial void OnCompanyAddressChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public Company()
		{
			this._Campaigns = new EntitySet<Campaign>(new Action<Campaign>(this.attach_Campaigns), new Action<Campaign>(this.detach_Campaigns));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyEmail", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string CompanyEmail
		{
			get
			{
				return this._CompanyEmail;
			}
			set
			{
				if ((this._CompanyEmail != value))
				{
					this.OnCompanyEmailChanging(value);
					this.SendPropertyChanging();
					this._CompanyEmail = value;
					this.SendPropertyChanged("CompanyEmail");
					this.OnCompanyEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAddress", DbType="VarChar(200)")]
		public string CompanyAddress
		{
			get
			{
				return this._CompanyAddress;
			}
			set
			{
				if ((this._CompanyAddress != value))
				{
					this.OnCompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddress = value;
					this.SendPropertyChanged("CompanyAddress");
					this.OnCompanyAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Campaign", Storage="_Campaigns", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Campaign> Campaigns
		{
			get
			{
				return this._Campaigns;
			}
			set
			{
				this._Campaigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Company", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Campaigns(Campaign entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Campaigns(Campaign entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Donations")]
	public partial class Donation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DonationID;
		
		private int _UserID;
		
		private System.DateTime _DonationDate;
		
		private string _DonationMessage;
		
		private string _DonationStatus;
		
		private string _DonationType;
		
		private EntitySet<Payment> _Payments;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDonationIDChanging(int value);
    partial void OnDonationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDonationDateChanging(System.DateTime value);
    partial void OnDonationDateChanged();
    partial void OnDonationMessageChanging(string value);
    partial void OnDonationMessageChanged();
    partial void OnDonationStatusChanging(string value);
    partial void OnDonationStatusChanged();
    partial void OnDonationTypeChanging(string value);
    partial void OnDonationTypeChanged();
    #endregion
		
		public Donation()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DonationID
		{
			get
			{
				return this._DonationID;
			}
			set
			{
				if ((this._DonationID != value))
				{
					this.OnDonationIDChanging(value);
					this.SendPropertyChanging();
					this._DonationID = value;
					this.SendPropertyChanged("DonationID");
					this.OnDonationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationDate", DbType="DateTime NOT NULL")]
		public System.DateTime DonationDate
		{
			get
			{
				return this._DonationDate;
			}
			set
			{
				if ((this._DonationDate != value))
				{
					this.OnDonationDateChanging(value);
					this.SendPropertyChanging();
					this._DonationDate = value;
					this.SendPropertyChanged("DonationDate");
					this.OnDonationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationMessage", DbType="VarChar(500)")]
		public string DonationMessage
		{
			get
			{
				return this._DonationMessage;
			}
			set
			{
				if ((this._DonationMessage != value))
				{
					this.OnDonationMessageChanging(value);
					this.SendPropertyChanging();
					this._DonationMessage = value;
					this.SendPropertyChanged("DonationMessage");
					this.OnDonationMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationStatus", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DonationStatus
		{
			get
			{
				return this._DonationStatus;
			}
			set
			{
				if ((this._DonationStatus != value))
				{
					this.OnDonationStatusChanging(value);
					this.SendPropertyChanging();
					this._DonationStatus = value;
					this.SendPropertyChanged("DonationStatus");
					this.OnDonationStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DonationType
		{
			get
			{
				return this._DonationType;
			}
			set
			{
				if ((this._DonationType != value))
				{
					this.OnDonationTypeChanging(value);
					this.SendPropertyChanging();
					this._DonationType = value;
					this.SendPropertyChanged("DonationType");
					this.OnDonationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Donation_Payment", Storage="_Payments", ThisKey="DonationID", OtherKey="DonationID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Donation", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Donations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Donations.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Donation = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Donation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payments")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private int _DonationID;
		
		private double _Amount;
		
		private System.DateTime _PaymentDate;
		
		private string _PaymentMethod;
		
		private string _PaymentStatus;
		
		private EntityRef<Donation> _Donation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnDonationIDChanging(int value);
    partial void OnDonationIDChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnPaymentDateChanging(System.DateTime value);
    partial void OnPaymentDateChanged();
    partial void OnPaymentMethodChanging(string value);
    partial void OnPaymentMethodChanged();
    partial void OnPaymentStatusChanging(string value);
    partial void OnPaymentStatusChanged();
    #endregion
		
		public Payment()
		{
			this._Donation = default(EntityRef<Donation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonationID", DbType="Int NOT NULL")]
		public int DonationID
		{
			get
			{
				return this._DonationID;
			}
			set
			{
				if ((this._DonationID != value))
				{
					if (this._Donation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDonationIDChanging(value);
					this.SendPropertyChanging();
					this._DonationID = value;
					this.SendPropertyChanged("DonationID");
					this.OnDonationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime NOT NULL")]
		public System.DateTime PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethod", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatus", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PaymentStatus
		{
			get
			{
				return this._PaymentStatus;
			}
			set
			{
				if ((this._PaymentStatus != value))
				{
					this.OnPaymentStatusChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatus = value;
					this.SendPropertyChanged("PaymentStatus");
					this.OnPaymentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Donation_Payment", Storage="_Donation", ThisKey="DonationID", OtherKey="DonationID", IsForeignKey=true)]
		public Donation Donation
		{
			get
			{
				return this._Donation.Entity;
			}
			set
			{
				Donation previousValue = this._Donation.Entity;
				if (((previousValue != value) 
							|| (this._Donation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Donation.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Donation.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._DonationID = value.DonationID;
					}
					else
					{
						this._DonationID = default(int);
					}
					this.SendPropertyChanged("Donation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _UserAddress;
		
		private System.DateTime _BirthDate;
		
		private string _UserType;
		
		private System.Data.Linq.Binary _UserPassword;
		
		private System.Data.Linq.Binary _Salt;
		
		private EntitySet<Campaign> _Campaigns;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Donation> _Donations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserAddressChanging(string value);
    partial void OnUserAddressChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    partial void OnUserPasswordChanging(System.Data.Linq.Binary value);
    partial void OnUserPasswordChanged();
    partial void OnSaltChanging(System.Data.Linq.Binary value);
    partial void OnSaltChanged();
    #endregion
		
		public User()
		{
			this._Campaigns = new EntitySet<Campaign>(new Action<Campaign>(this.attach_Campaigns), new Action<Campaign>(this.detach_Campaigns));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Donations = new EntitySet<Donation>(new Action<Donation>(this.attach_Donations), new Action<Donation>(this.detach_Donations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress", DbType="VarChar(200)")]
		public string UserAddress
		{
			get
			{
				return this._UserAddress;
			}
			set
			{
				if ((this._UserAddress != value))
				{
					this.OnUserAddressChanging(value);
					this.SendPropertyChanging();
					this._UserAddress = value;
					this.SendPropertyChanged("UserAddress");
					this.OnUserAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="Binary(32) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="Binary(20)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Campaign", Storage="_Campaigns", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Campaign> Campaigns
		{
			get
			{
				return this._Campaigns;
			}
			set
			{
				this._Campaigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Company", Storage="_Companies", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Donation", Storage="_Donations", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Donation> Donations
		{
			get
			{
				return this._Donations;
			}
			set
			{
				this._Donations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Campaigns(Campaign entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Campaigns(Campaign entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Donations(Donation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
